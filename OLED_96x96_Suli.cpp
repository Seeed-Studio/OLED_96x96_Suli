/*
  SeeedOLED.cpp - SSD130x OLED Driver Library
  2011 Copyright (c) Seeed Technology Inc.  All right reserved.
  
  Author: Visweswara R
  
  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.
  
  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "OLED_96x96_Suli.h"


// 8x8 Font ASCII 32 - 127 Implemented
// Users can modify this to support more characters(glyphs)
// BasicFont is placed in code memory.

// This font be freely used without any restriction(It is placed in public domain)
#if defined(ARDUINO)
const unsigned char BasicFont[][8] PROGMEM=
#else
const unsigned char BasicFont[][8] =
#endif
{
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
    {0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00},
    {0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00},
    {0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00},
    {0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00},
    {0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00},
    {0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00},
    {0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00},
    {0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00},
    {0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00},
    {0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00},
    {0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00},
    {0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00},
    {0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00},
    {0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00},
    {0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00},
    {0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00},
    {0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00},
    {0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00},
    {0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00},
    {0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00},
    {0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00},
    {0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00},
    {0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00},
    {0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00},
    {0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00},
    {0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00},
    {0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00},
    {0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00},
    {0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00},
    {0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00},
    {0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00},
    {0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00},
    {0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00},
    {0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00},
    {0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00},
    {0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00},
    {0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00},
    {0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00},
    {0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00},
    {0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00},
    {0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00},
    {0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00},
    {0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00},
    {0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00},
    {0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00},
    {0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00},
    {0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00},
    {0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00},
    {0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00},
    {0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00},
    {0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00},
    {0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00},
    {0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00},
    {0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00},
    {0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00},
    {0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00},
    {0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00},
    {0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00},
    {0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00},
    {0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00},
    {0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00},
    {0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00},
    {0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00},
    {0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00},
    {0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00},
    {0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00},
    {0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00},
    {0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00},
    {0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00},
    {0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00},
    {0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00},
    {0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00},
    {0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00},
    {0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00},
    {0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00},
    {0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00},
    {0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00},
    {0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00},
    {0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00},
    {0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00},
    {0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00},
    {0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00},
    {0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00},
    {0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00},
    {0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00},
    {0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00},
    {0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00},
    {0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00},
    {0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00},
    {0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00},
    {0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00},
    {0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00},
    {0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00}
};


void *__I2C_Device;

uint8 addressingMode = 0;

uint8 grayH;
uint8 grayL;

void oled_96x96_init(void * I2C_Device)
{
    __I2C_Device = I2C_Device;
    
    suli_i2c_init(__I2C_Device);
    
    oled_96x96_cmd(0xFD); // Unlock OLED driver IC MCU interface from entering command. i.e: Accept commands
    oled_96x96_cmd(0x12);
    oled_96x96_cmd(0xAE); // Set display off
    oled_96x96_cmd(0xA8); // set multiplex ratio
    oled_96x96_cmd(0x5F); // 96
    oled_96x96_cmd(0xA1); // set display start line
    oled_96x96_cmd(0x00);
    oled_96x96_cmd(0xA2); // set display offset
    oled_96x96_cmd(0x60);
    oled_96x96_cmd(0xA0); // set remap
    oled_96x96_cmd(0x46);
    oled_96x96_cmd(0xAB); // set vdd internal
    oled_96x96_cmd(0x01); //
    oled_96x96_cmd(0x81); // set contrasr
    oled_96x96_cmd(0x53); // 100 nit
    oled_96x96_cmd(0xB1); // Set Phase Length
    oled_96x96_cmd(0X51); //
    oled_96x96_cmd(0xB3); // Set Display Clock Divide Ratio/Oscillator Frequency
    oled_96x96_cmd(0x01);
    oled_96x96_cmd(0xB9); //
    oled_96x96_cmd(0xBC); // set pre_charge voltage/VCOMH
    oled_96x96_cmd(0x08); // (0x08);
    oled_96x96_cmd(0xBE); // set VCOMH
    oled_96x96_cmd(0X07); // (0x07);
    oled_96x96_cmd(0xB6); // Set second pre-charge period
    oled_96x96_cmd(0x01); //
    oled_96x96_cmd(0xD5); // enable second precharge and enternal vsl
    oled_96x96_cmd(0X62); // (0x62);
    oled_96x96_cmd(0xA4); // Set Normal Display Mode
    oled_96x96_cmd(0x2E); // Deactivate Scroll
    oled_96x96_cmd(0xAF); // Switch on display
    delay(100);

    // Row Address
    oled_96x96_cmd(0x75); 	  // Set Row Address 
    oled_96x96_cmd(0x00); 	  // Start 0
    oled_96x96_cmd(0x5f); 	  // End 95 

    // Column Address
    oled_96x96_cmd(0x15); 	  // Set Column Address 
    oled_96x96_cmd(0x08); 	  // Start from 8th Column of driver IC. This is 0th Column for OLED 
    oled_96x96_cmd(0x37); 	  // End at  (8 + 47)th column. Each Column has 2 pixels(segments)

    // Init gray level for text. Default:Brightest White
    grayH= 0xF0;
    grayL= 0x0F;
}

// send command
void oled_96x96_cmd(unsigned char command)
{
    uint8 dta[2] = {SeeedGrayOLED_Command_Mode, command};
    suli_i2c_write(__I2C_Device, SeeedGrayOLED_Address, dta, 2);
}

// send data
void oled_96x96_dta(unsigned char Data)
{
    uint8 dta[2] = {SeeedGrayOLED_Data_Mode, Data};
    suli_i2c_write(__I2C_Device, SeeedGrayOLED_Address, dta, 2);
}

void oled_96x96_brightness(unsigned char Brightness)
{
    oled_96x96_cmd(SeeedGrayOLED_Set_ContrastLevel_Cmd);
    oled_96x96_cmd(Brightness);
}

// horizontal mode
void oled_96x96_hmode()
{
    oled_96x96_cmd(0xA0); // remap to
    oled_96x96_cmd(0x42); // horizontal mode

    // Row Address
    oled_96x96_cmd(0x75); 	  // Set Row Address 
    oled_96x96_cmd(0x00); 	  // Start 0
    oled_96x96_cmd(0x5f); 	  // End 95 

    // Column Address
    oled_96x96_cmd(0x15); 	  // Set Column Address 
    oled_96x96_cmd(0x08); 	  // Start from 8th Column of driver IC. This is 0th Column for OLED 
    oled_96x96_cmd(0x37); 	  // End at  (8 + 47)th column. Each Column has 2 pixels(or segments)
}

// 
void oled_96x96_XY(unsigned char Row, unsigned char Column)
{
    //Column Address
    oled_96x96_cmd(0x15); 	           /* Set Column Address */
    oled_96x96_cmd(0x08+(Column*4));  /* Start Column: Start from 8 */
    oled_96x96_cmd(0x37); 	           /* End Column */
    // Row Address
    oled_96x96_cmd(0x75); 	           /* Set Row Address */
    oled_96x96_cmd(0x00+(Row*8));     /* Start Row*/
    oled_96x96_cmd(0x07+(Row*8));     /* End Row*/
}

//
void oled_96x96_clear()
{
    unsigned char i,j;
    for(j=0;j<48;j++)
    {
        for(i=0;i<96;i++)  //clear all columns
        {
            oled_96x96_dta(0x00);
        }
    }
}

void oled_96x96_char(unsigned char C)
{

    if(C < 32 || C > 127) //Ignore non-printable ASCII characters. This can be modified for multilingual font.
    {
        C='?'; //Space
    }	

    for(char i=0;i<8;i=i+2)
    {
        for(char j=0;j<8;j++)
        {
            // Character is constructed two pixel at a time using vertical mode from the default 8x8 font
            char c=0x00;
#if defined(ARDUINO)
            char bit1 = (pgm_read_byte(&BasicFont[C-32][i]) >> j)  & 0x01;  
            char bit2 = (pgm_read_byte(&BasicFont[C-32][i+1]) >> j) & 0x01;
#else
            char bit1 = (BasicFont[C-32][i] >> j)  & 0x01;  
            char bit2 = (BasicFont[C-32][i+1] >> j) & 0x01;
#endif
           // Each bit is changed to a nibble
            c|=(bit1) ? grayH : 0x00;
            c|=(bit2) ? grayL : 0x00;
            oled_96x96_dta(c);
        }
    }

}

void oled_96x96_setVerticalMode()
{
    oled_96x96_cmd(0xA0); // remap to
    oled_96x96_cmd(0x46); // Vertical mode
}


void oled_96x96_string(const char *String)
{
    unsigned char i=0;
    while(String[i])
    {
        oled_96x96_char(String[i]);
        i++;
    }
}

unsigned char oled_96x96_num(long long_num)
{
    unsigned char char_buffer[10]="";
    unsigned char i = 0;
    unsigned char f = 0;

    if (long_num < 0)
    {
        f=1;
        oled_96x96_char('-');
        long_num = -long_num;
    }
    else if (long_num == 0)
    {
        f=1;
        oled_96x96_char('0');
        return f;
    }

    while (long_num > 0)
    {
        char_buffer[i++] = long_num % 10;
        long_num /= 10;
    }

    f=f+i;
    for(; i > 0; i--)
    {
        oled_96x96_char('0'+ char_buffer[i - 1]);
    }
    return f;

}

unsigned char oled_96x96_float_decimal(float floatNumber,unsigned char decimal)
{
    unsigned int temp=0;
    float decy=0.0;
    float rounding = 0.5;
    unsigned char f=0;
    if(floatNumber<0.0)
    {
        oled_96x96_string("-");
        floatNumber = -floatNumber;
        f +=1;
    }
    for (unsigned char i=0; i<decimal; ++i)
    {
        rounding /= 10.0;
    }
    floatNumber += rounding;

    temp = floatNumber;
    f += oled_96x96_num(temp);
    if(decimal>0)
    {
        oled_96x96_char('.');
        f +=1;
    }
    decy = floatNumber-temp;//decimal part,
    for(unsigned char i=0;i<decimal;i++)//4
    {
        decy *=10;// for the next decimal
        temp = decy;//get the decimal
        oled_96x96_num(temp);
        decy -= temp;
    }
    f +=decimal;
    return f;
}

unsigned char oled_96x96_float(float floatNumber)
{
    unsigned char decimal=2;
    unsigned int temp=0;
    float decy=0.0;
    float rounding = 0.5;
    unsigned char f=0;
    if(floatNumber<0.0)
    {
        oled_96x96_string("-");
        floatNumber = -floatNumber;
        f +=1;
    }
    for (unsigned char i=0; i<decimal; ++i)
    {
        rounding /= 10.0;
    }
    floatNumber += rounding;

    temp = floatNumber;
    f += oled_96x96_num(temp);
    if(decimal>0)
    {
        oled_96x96_char('.');
        f +=1;
    }
    decy = floatNumber-temp;//decimal part,
    for(unsigned char i=0;i<decimal;i++)//4
    {
        decy *=10;// for the next decimal
        temp = decy;//get the decimal
        oled_96x96_num(temp);
        decy -= temp;
    }
    f +=decimal;
    return f;
}


/*
 * set Horizontal Scroll Properties
 */
void oled_96x96_hsp(uint8 direction, uint8 startRow, uint8 endRow, uint8 startColumn, uint8 endColumn, uint8 scrollSpeed)
{

    if(Scroll_Right == direction)
    {
        //Scroll Right
        oled_96x96_cmd(0x27);
    }
    else
    {
        //Scroll Left  
        oled_96x96_cmd(0x26);
    }
    oled_96x96_cmd(0x00);       //Dummmy byte
    oled_96x96_cmd(startRow);
    oled_96x96_cmd(scrollSpeed);
    oled_96x96_cmd(endRow);
    oled_96x96_cmd(startColumn + 8);
    oled_96x96_cmd(endColumn + 8);
    oled_96x96_cmd(0x00);      //Dummmy byte
}

/*
 * active scroll
 */
void oled_96x96_active_scroll()
{
    oled_96x96_cmd(SeeedGrayOLED_Activate_Scroll_Cmd);
}

void oled_96x96_deactive_scroll()
{
    oled_96x96_cmd(SeeedGrayOLED_Dectivate_Scroll_Cmd);
}

void oled_96x96_normal_display()
{
    oled_96x96_cmd(SeeedGrayOLED_Normal_Display_Cmd);
}

void oled_96x96_inversel_display()
{
    oled_96x96_cmd(SeeedGrayOLED_Inverse_Display_Cmd);
}
